{
    // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Script Template": {
        "scope": "powershell",
        "prefix": "st",
        "body": [
            "#Requires -Version 5.1",
            "",
            "<#",
            ".SYNOPSIS",
            "\tShort Description",
            ".DESCRIPTION",
            "\tLong Description",
            "",
            ".EXAMPLE",
            "\t(No Parameters)",
            "\t## EXAMPLE OUTPUT WITHOUT PARAMS ##",
            "",
            ".PARAMETER SomeParam",
            "\tA brief explanation of the parameter.",
            "",
            ".PARAMETER CustomFieldParam",
            "\tA brief explanation of the parameter.",
            "",
            ".NOTES",
            "\tMinimum OS Architecture Supported: Windows 10, Windows Server 2016",
            "\tRelease Notes: Initial Release",
            "#>",
            "",
            "[CmdletBinding()]",
            "param (",
            "\t[Parameter()]",
            "\t[String]$$SomeParam",
            ")",
            "",
            "begin {",
            "\tfunction Test-IsElevated {",
            "\t\t[CmdletBinding()]",
            "\t\tparam ()",
            "\t\t",
            "\t\t# Get the current Windows identity of the user running the script",
            "\t\t\\$Identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()",
            "\t\t",
            "\t\t# Create a WindowsPrincipal object based on the current identity",
            "\t\t\\$SecurityPrincipal = New-Object System.Security.Principal.WindowsPrincipal(\\$Identity)",
            "\t\t",
            "\t\t# Check if the current user is in the Administrator role",
            "\t\t# The function returns \\$True if the user has administrative privileges, \\$False otherwise",
            "\t\t# 544 is the value for the Built In Administrators role",
            "\t\t# Reference: https://learn.microsoft.com/en-us/dotnet/api/system.security.principal.windowsbuiltinrole",
            "\t\t\\$SecurityPrincipal.IsInRole([System.Security.Principal.WindowsBuiltInRole]'544')",
            "\t}",
            "",
            "\tif (!$$ExitCode) {",
            "\t\t$$ExitCode = 0",
            "\t}",
            "}",
            "process {",
            "\t# Attempt to determine if the current session is running with Administrator privileges.",
            "\ttry {",
            "\t\t\\$IsElevated = Test-IsElevated -ErrorAction Stop",
            "\t}",
            "\tcatch {",
            "\t\tWrite-Host -Object \"[Error] $(\\$_.Exception.Message)\"",
            "\t\tWrite-Host -Object \"[Error] Unable to determine if the account '\\$env:Username' is running with Administrator privileges.\"",
            "\t\texit 1",
            "\t}",
            "\t",
            "\tif (!\\$IsElevated) {",
            "\t\tWrite-Host -Object \"[Error] Access Denied: Please run with Administrator privileges.\"",
            "\t\texit 1",
            "\t}",
            "",
            "\texit $$ExitCode",
            "}"
        ],
        "description": "Template Script for this repo"
    },
    "Script Tests Template": {
        "scope": "powershell",
        "prefix": "stt",
        "body": [
            "BeforeAll {",
            "\t# Get script path",
            "\t$$Path = \".\\scripts\\\\$($$PSCommandPath | Split-Path -Leaf)\" -Replace '.tests.', '.'",
            "\t# Test that the script exists",
            "\tTest-Path -Path $$Path | Should -BeTrue -Because \"Script file should exist!\"",
            "",
            "\t<#",
            "\tif ((Get-Command my.exe -ErrorAction SilentlyContinue).Count -eq 0) {",
            "\t\tfunction my.exe () {}",
            "\t}",
            "\tif ((Get-Command Get-MyFunction -ErrorAction SilentlyContinue).Count -eq 0) {",
            "\t\tfunction Get-MyFunction () {}",
            "\t}",
            "",
            "\tMock My.exe {}",
            "\tMock Get-MyFunction {}",
            "\t#>",
            "",
            "\tMock Write-Host { $$Object | ForEach-Object { Write-Verbose -Message $$_ } }",
            "}",
            "Describe \"$(($$PSCommandPath | Split-Path -Leaf) -Replace '.tests.', '.')\" {",
            "\tContext \"Under ideal conditions and using default values\" {",
            "\t\tIt \"Should Not Throw Error\" {",
            "",
            "\t\t\t{ . $$Path } | Should -Not -Throw",
            "",
            "\t\t\tShould -Not -Invoke Write-Host -ParameterFilter { $$Object -match \"Error\" }",
            "",
            "\t\t\t$$LASTEXITCODE | Should -Be 0",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Kyle's Template Test Script for this repo"
    },
    "Generic List": {
        "scope": "powershell",
        "prefix": "glst",
        "body": [
            "New-Object System.Collections.Generic.List[object]"
        ]
    },
    "Script Template Bash": {
        "scope": "shellscript",
        "prefix": "st",
        "description": "Template Test Bash Script for this repo",
        "body": [
            "#!/usr/bin/env bash",
            "#",
            "# Description: Script description",
            "#",
            "# Preset Parameter: --someParam \"someValue\"",
            "#\t\tSome Description",
            "#",
            "# Preset Parameter: --someSwitch",
            "#\t\tSome Description",
            "#",
            "# Preset Parameter: --help",
            "#\t\tDisplays some help text.",
            "#",
            "# Release Notes: Initial Release",
            "",
            "_arg_nodefault=",
            "_arg_someParam=90",
            "_arg_someSwitch=\"off\"",
            "",
            "print_help() {",
            "\tprintf '\\n\\n%s\\n\\n' 'Usage: [--someParam|-p <arg>] [--someSwitch|-s] [--help|-h]'",
            "\tprintf '%s\\n' 'Preset Parameter: --someParam \"90\"'",
            "\tprintf '\\t%s\\n' \"A description of the parameter.\"",
            "\tprintf '%s\\n' 'Preset Parameter: --someSwitch'",
            "\tprintf '\\t%s\\n' \"A description of the parameter\"",
            "\tprintf '%s\\n' 'Preset Parameter: --help'",
            "\tprintf '\\t%s\\n' \"Displays this help menu.\"",
            "}",
            "",
            "die() {",
            "\tlocal _ret=\"\\${2:-1}\"",
            "\techo \"\\$1\" >&2",
            "\ttest \"\\${_PRINT_HELP:-no}\" = yes && print_help >&2",
            "\texit \"\\${_ret}\"",
            "}",
            "",
            "parse_commandline() {",
            "\twhile test $# -gt 0; do",
            "\t\t_key=\"\\$1\"",
            "\t\tcase \"\\$_key\" in",
            "\t\t--someParam | --someparam | --param | -p)",
            "\t\t\ttest $# -lt 2 && die \"[Error] Missing value for the optional argument '\\$_key'.\" 1",
            "\t\t\t_arg_someParam=\\$2",
            "\t\t\tshift",
            "\t\t\t;;",
            "\t\t--someParam=*)",
            "\t\t\t_arg_someParam=\"${_key##--someParam=}\"",
            "\t\t\t;;",
            "\t\t--someSwitch | --someswitch | -s)",
            "\t\t\t_arg_someSwitch=\"on\"",
            "\t\t\t;;",
            "\t\t--help | -h)",
            "\t\t\t_PRINT_HELP=yes die",
            "\t\t\t;;",
            "\t\t*)",
            "\t\t\t_PRINT_HELP=yes die \"[Error] Got an unexpected argument '\\$1'\" 1",
            "\t\t\t;;",
            "\t\tesac",
            "\t\tshift",
            "\tdone",
            "}",
            "",
            "parse_commandline \"$@\"",
            "",
            "if [[ -n \\$someParameter ]]; then",
            "\t_arg_someParam=\"\\$someParameter\"",
            "fi",
            "",
            "if [[ -n \\$someSwitch && \\$someSwitch == \"true\" ]]; then",
            "\t_arg_someSwitch=\"on\"",
            "fi",
            "",
            "if [[ \\$(id -u) -ne 0 ]]; then",
            "\t_PRINT_HELP=no die \"[Error] This script must be run with root permissions. Try running it with sudo or as the system/root user.\" 1",
            "fi",
            ""
        ]
    },
    "Shellspec Test Template Bash": {
        "scope": "shellscript",
        "prefix": "stt",
        "description": "Shellspec Bash Template for this repo",
        "body": [
            "#shellcheck shell=bash",
            "",
            "_arg_ScriptPath=\"src/macos/TheShellScriptFile.sh\"",
            "",
            "Describe 'TheShellScriptFile.sh'",
            "\tsetup() {",
            "\t\techo \"Some setup steps\"",
            "\t}",
            "\tcleanup() {",
            "\t\techo \"Some cleanup steps\"",
            "\t}",
            "\tsomeFunction() {",
            "\t\techo \"Success\"",
            "\t}",
            "\tBeforeEach 'setup'",
            "\tAfterEach 'cleanup'",
            "\tIt 'Should not error'",
            "\t\tWhen run source \\$_arg_ScriptPath \"--someParam\" \"Example\"",
            "\t\tThe status should be success",
            "\t\tThe stderr should not include \"Error\"",
            "\t\tThe stdout should be present",
            "\tEnd",
            "\tIt 'Should revert the sshd file when requested'",
            "\t\tWhen run source \\$_arg_ScriptPath \"--someSwitch\"",
            "\t\tThe status should be success",
            "\t\tThe stderr should not include \"Error\"",
            "\t\tThe stdout should be present",
            "\t\tThe result of function someFunction should include \"Success\"",
            "\tEnd",
            "End"
        ]
    }
}